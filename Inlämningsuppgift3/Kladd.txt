using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class GameInterface
    {
        public bool GameRunning { get; set; }
        public Player Player { get; set; }

        public List<Room> Rooms { get; set; }

        public InputProcessor InputProcessor { get; set; }

        public WordListProcessor WordListProcessor { get; set; }


        public GameInterface()

        {
            GameRunning = true;
            Player = new Player();
            Rooms = new List<Room>();
            Rooms = Repository.LoadRooms();
            InputProcessor = new InputProcessor();
            Player.Location = Rooms[0];

        }

        public void Game()
        {
            string playerInput;
            bool newLocation = true;

            while (GameRunning)
            {

                if (newLocation)
                {
                    Console.WriteLine(Player.Location.Description);
                    Console.WriteLine(Player.Location.RoomContainsDescription());
                    newLocation = false;
                }

                Console.WriteLine();
                playerInput = Console.ReadLine();

                InputProcessor.Process(playerInput);

                switch (InputProcessor.PlayerInputSplittedString[0])
                {
                    case (null):
                    case (""):

                        Console.WriteLine("Write a command.");
                        break;

                    case ("look"):

                        Player.Look(InputProcessor.SecondWordToEnd, InputProcessor.PlayerInputSplittedString);
                        break;

                    case ("inventory"):
                    case ("open inventory"):
                        Player.ShowInventory();
                        break;

                    case ("go"):

                        newLocation = Player.Move(InputProcessor.PlayerInputSplittedString[1], Rooms);
                        break;

                    case ("use"):
                        Player.Use(InputProcessor.SecondWordToEnd, InputProcessor.PlayerInputSplittedString);

                        break;

                    case ("take"):
                        Player.Take(InputProcessor.SecondWordToEnd, InputProcessor.PlayerInputSplittedString);

                        break;

                    case ("drop"):
                        Player.Drop(InputProcessor.SecondWordToEnd, InputProcessor.PlayerInputSplittedString);

                        break;

                    default:
                        Console.WriteLine($"I don't know the word \"{InputProcessor.PlayerInputSplittedString[0]}\".");
                        break;


                }

            }

        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class GameObject
    {
        public string Name { get; set; }
        public string Description { get; set; }       


        public void Inspect()
        {
            Console.WriteLine(Description);


        }

    }


}
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class InputProcessor
    {
        public string PlayerInput { get; set; }
        public string[] PlayerInputSplittedString { get; set; }
        public int IndexOfFirstSpace { get; set; }
        public string FirstWord { get; set; }
        public string SecondWordToEnd { get; set; }

        public WordListProcessor WordListProcessor { get; set; }

        public InputProcessor()
        {
            WordListProcessor = new WordListProcessor();
        }
        public void Process(string playerInput)
        {
 
            PlayerInput = playerInput.ToLower();
            PlayerInputSplittedString = PlayerInput.Split(" ");

            if (PlayerInputSplittedString.Length > 1)
            {
                IndexOfFirstSpace = PlayerInput.IndexOf(' ');
                FirstWord = PlayerInput.Substring(0, IndexOfFirstSpace);
                SecondWordToEnd = PlayerInput.Substring(IndexOfFirstSpace + 1);
                CheckAndReplacePrepositions();

            }
            else
            {
                IndexOfFirstSpace = -1;
                FirstWord = "";
                SecondWordToEnd = "";
            }

                      
            PlayerInputSplittedString[0] = WordListProcessor.CheckActionSynonyms(PlayerInputSplittedString[0]);
            
            
        }

        public void CheckAndReplacePrepositions()
        {
            PlayerInputSplittedString = WordListProcessor.CheckPrepositionSynonyms(PlayerInputSplittedString);
            PlayerInput = string.Join(" ", PlayerInputSplittedString);
            IndexOfFirstSpace = PlayerInput.IndexOf(' ');
            FirstWord = PlayerInput.Substring(0, IndexOfFirstSpace);
            SecondWordToEnd = PlayerInput.Substring(IndexOfFirstSpace + 1);

        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class Item : GameObject
    {

        public bool IsContainer { get; set; }
        public List<Item> Container { get; set; } = new List<Item>();

        public string[] Synonyms { get; set; }

        public string ItemInEnvironmentDescription { get; set; }

        //public int Amount { get; set; }

        public Item()
        {
       

        }
     
    }


}
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class Player
    {
        public string Name { get; set; }
        public List<Item> Inventory { get; set; } = new List<Item>();

        public Room Location { get; set; }

        public Player()
        {
               //loadStartingItems()
        }
        public void DropItem(Item item)
        {
            Location.Items.Add(item);
            Inventory.Remove(item);
            
        }

        public void ShowInventory()
        {
            if (Inventory.Count == 0)
            {
                Console.WriteLine("You have no items in your inventory.");
            }
            else
            {

                Console.WriteLine($"Inventory:");

                foreach (Item item in Inventory)
                {
                    Console.WriteLine(item.Name);
                }
            }
        }

        public void Look(string secondWordToEnd, string[] splittedString)
        {
            if (splittedString.Length == 1)
            {

                Console.WriteLine(Location.Description);
                Console.WriteLine(Location.RoomContainsDescription());
                
            }
            else
            {

                foreach (Item item in Location.Items)
                {
                    if (item.Name.ToLower() == secondWordToEnd.ToLower())
                    {
                        Console.WriteLine(item.Description);

                    }
                }
                foreach (Item item in Inventory)
                {
                    if (item.Name.ToLower() == secondWordToEnd.ToLower())
                    {
                        Console.WriteLine($"{item.Description} [in inventory]");

                    }
                }
            }

        }

        public bool Move(string direction, List <Room> roomList)
        {

            bool hasMoved = false;

            foreach(RoomExit roomexit in Location.RoomExits)
            {
                string newLocation = "";

                if (direction.ToLower() == roomexit.Direction.ToLower())
                {
                    newLocation = roomexit.Connection;

                }

                foreach(Room room in roomList)
                {
                    if (newLocation == room.Name)
                    {
                        Location = room;
                        hasMoved = true;

                    }
                }
            }

            if (hasMoved)
            {
                return true;
            }
            else
            {
                Console.WriteLine("You can't move in that direction.");
                return false;
            }
        }

        public void Use(string secondWordToEnd, string[] splittedString)
        {
            if (splittedString.Length > 1)
            {
                if (secondWordToEnd.Contains("on"))
                {
                    for (int i = 0; i < splittedString.Length; i++)
                    {
                        if (splittedString[i] == "on")
                        {
                            string item1 = splittedString[i - 1];
                            string item2 = splittedString[i + 1];

                            this.Combination(item1, item2);

                        }

                    }

                }
                else
                {
                    if (secondWordToEnd == "pack of bubblegum" || secondWordToEnd == "gum")
                    {

                        foreach (Item item in Location.Items)
                        {
                            if (item.Name.ToLower() == secondWordToEnd.ToLower())
                            {                               

                            }
                        }
                        foreach (Item item in Inventory)
                        {
                            if (item.Name.ToLower() == secondWordToEnd.ToLower())
                            {
                         

                            }
                        }
                    }

                }
                

            }
            else
            {
                Console.WriteLine("What do you want to 'use'?");
            }

        }

        public void Combination(string item1, string item2)
        {

            Console.WriteLine("kombination");




        }
        public void Take(string takenObject, string[] splittedString)
        {
            if (splittedString.Length > 1)
            {
                foreach (Item item in Location.Items)
                {
                    if (item.Name.ToLower() == takenObject.ToLower())
                    {
                        Location.Items.Remove(item);
                        Inventory.Add(item);
                        Console.WriteLine($"You pick up the {item.Name.ToLower()}.");
                        break;
                    }
                }
            }
            else
            {
                Console.WriteLine("What do you want to 'take'?");
            }
        }

        public void Drop(string droppedObject, string[] splittedString)
        {
            if (splittedString.Length > 1)
            {

                foreach (Item item in Inventory)
                {
                    if (item.Name.ToLower() == droppedObject.ToLower())
                    {
                        Location.Items.Add(item);
                        Inventory.Remove(item);
                        Console.WriteLine($"You drop the {item.Name.ToLower()}.");
                        break;
                    }
                }
            }
            else
            {
                Console.WriteLine("What do you want to 'drop'?");
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public static class Repository
    {


        public static List<Room> LoadRooms()
        {
            List<Room> rooms = new List<Room>();

            using (StreamReader reader = new StreamReader("D:\\repos\\Inlämningsuppgift3\\Inlämningsuppgift3\\Rooms.json"))
            { 
                string stringRooms = reader.ReadToEnd();
                rooms = JsonSerializer.Deserialize<List<Room>>(stringRooms);
            }
            return rooms;
        }

        public static Dictionary<string, string[]> LoadActionWordList()
        {
            Dictionary<string, string[]> wordList = new Dictionary<string, string[]>();

            using (StreamReader reader = new StreamReader("D:\\repos\\Inlämningsuppgift3\\Inlämningsuppgift3\\WordList_ActionSynonyms.json"))
            {
                string stringWordList = reader.ReadToEnd();
                wordList = JsonSerializer.Deserialize<Dictionary<string, string[]>>(stringWordList);

            }

            return wordList;

        }

        public static string[] LoadPrepositionWordList()
        {
            string[] wordList;

            using (StreamReader reader = new StreamReader("D:\\repos\\Inlämningsuppgift3\\Inlämningsuppgift3\\WordList_Prepositions.json"))
            {
                string stringWordList = reader.ReadToEnd();
                wordList = JsonSerializer.Deserialize<string[]>(stringWordList);

            }


            return wordList;
        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class Room : GameObject
    {
        public List<Item> Items { get; set; }
        public List<RoomExit> RoomExits { get; set; }

        public List<RoomObjectOfInterest> RoomObjectOfInterest { get; set; }

        public Room()
        {
            Items = new List<Item>();

            RoomExits = new List<RoomExit>();

            RoomObjectOfInterest = new List<RoomObjectOfInterest>();

        }



        public string RoomContainsDescription()
        {
            string returnString = "";

           foreach(Item item in Items)
           {
                returnString += ($"There is a {item.Name.ToLower()} on the floor.\n");

           }

           

            return returnString;

        }





    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class RoomExit
    {
        public string Direction { get; set; }

        public string Connection { get; set; }
        public bool IsLocked { get; set; }


        public RoomExit()
        {
                
        }



    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{


    public class RoomObjectOfInterest : GameObject
    {



    }


}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.ExceptionServices;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class WordListProcessor
    {
        public Dictionary<string, string[]> ActionWordList;
        public string[] PrepositionWordList;

        public WordListProcessor()
        {
            ActionWordList = Repository.LoadActionWordList();
            PrepositionWordList = Repository.LoadPrepositionWordList();
        }

        public string CheckActionSynonyms(string word)
        {

            //common words check
            foreach (string key in ActionWordList.Keys)
            {
                if (word == key)
                {
                    return word;

                }
            }

            //synonyms check
            foreach (KeyValuePair<string,string[]> pair in ActionWordList)
            {
                foreach(string synonym in pair.Value)
                {
                    if (word == synonym)
                    {
                        return pair.Key;

                    }
                  
                }

            }
            return word;
        }

        public string[] CheckPrepositionSynonyms(string[] playerInputSplittedString)
        {
            string[] returnArray = playerInputSplittedString;

            for(int i = 0; i< playerInputSplittedString.Length; i++)
            {
                for(int i2 = 0; i2 < PrepositionWordList.Length; i2++)
                {
                    if (playerInputSplittedString[i] == PrepositionWordList[i2])
                    {
                        returnArray[i] = "on";

                    }
                }
            }

            return returnArray;
        }

    }
}

JSON files:

Rooms.json:

[
  {
    "Name": "Dungeon",
    "Description": "You are in a small dungeon cell, carved out of rock.",
    "RoomExits": [ { "Direction": "North", "Connection" : "Drainage Room", "IsLocked" : true } ],

    "Items": [
      {
        "Name": "Pack of bubblegum",
        "Synonyms": ["bubblegum", "gum"],
        "Description": "A pack of bubblegum. The name of the brand is \"Hubbabubba\"."
      },
      {
        "Name": "Rusty key",
        "Synonyms": ["key"],
        "Description": "An old rusty key of simple design."
      }
    ]
  },
  {
    "Name": "Oak Room",
    "Description": "You are in a large circular room, in the middle of the room there is a patch of dirt, and on it stands a large oak tree, far above the oak in the ceiling there is a small opening with a faint blue light",
    "RoomExits": [
      {
        "Direction": "East",
        "Connection": "Drainage Room"
      }
    ],
    "Items": [
      {
        "Name": "Stick",
        "Description": "A stick from an oak tree, it's quite straight. It's a good stick."
      },
      {
        "Name": "Stick",
        "Description": "A stick from an oak tree, it's quite straight. It's a good stick."
      },
      {
        "Name": "Stick",
        "Description": "A stick from an oak tree, it's quite straight. It's a good stick."
      }
    ],
    "RoomObjectOfInterest": [
      {
        "Name": "Oak",
        "Description": "A large oak tree, must be more than fifty years old. On the ground next to it you notice some sticks that have fallen from the tree"
      }
    ]
  },
  {
    "Name": "Drainage Room",
    "Description": "You are in some sort of drainage room, the floor slopes towards the center of the room where there is a grated drain in the floor that collects water from the other rooms.",
    "RoomExits": [
      {
        "Direction": "West",
        "Connection": "Oak Room"
      },
      {
        "Direction": "South",
        "Connection":  "Dungeon"
      }
    ],
    "RoomObjectOfInterest": [
      {
        "Name": "Drain",
        "Description": "A drainage hole"
      }
    ]
  }
]

WordList_ActionSynonyms.json:

{
  "look": [ "check", "examine", "watch", "inspect" ],
  "go": [ "walk", "move", "proceed" ],
  "take": [ "grab", "pick up", "pick", "snatch", "get" ],
  "use": [],
  "open": [],
  "drop": ["throw", "discard"]

}

WordList_Prepositions.json:

[ "on", "with", "and" ]



