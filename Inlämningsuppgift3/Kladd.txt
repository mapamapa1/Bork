using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using static System.Net.Mime.MediaTypeNames;

namespace Inlämningsuppgift3.Classes
{
    public class GameInterface
    {
        public bool GameRunning { get; set; }
        public Player Player { get; set; }

        public List<Room> Rooms { get; set; }

        public InputProcessor InputProcessor { get; set; }

        public WordListProcessor WordListProcessor { get; set; }


        public GameInterface()

        {
            GameRunning = false;
            Player = new Player();
            Rooms = new List<Room>();
            Rooms = Repository.LoadRooms();           
            Player.Location = Rooms[0];
            InputProcessor = new InputProcessor(Player);

        }

        public void Game()
        {
            string playerInput;
            bool newLocation = true;
            int moveCounter = 0;

            Intro();

            while (GameRunning)
            {

                if (newLocation)
                {                   

                    Console.WriteLine(Player.Location.RoomDescription());
                    
                    newLocation = false;
                }

                Console.WriteLine();
                playerInput = Console.ReadLine();

                InputProcessor.Process(playerInput);

                switch (InputProcessor.PlayerInputSplittedString[0])
                {
                    case (null):
                    case (""):

                        Console.WriteLine("Write a command.");
                        break;

                    case ("look"):

                        Player.Look(InputProcessor.PlayerInput, InputProcessor.SecondWordToEnd, InputProcessor.PlayerInputSplittedString);
                        break;

                    case ("inventory"):
                        Player.ShowInventory();
                        break;

                    case ("go"):

                        newLocation = Player.Move(InputProcessor.PlayerInputSplittedString, InputProcessor.SecondWordToEnd, Rooms);
                        break;

                    case ("use"):
                        Player.Use(InputProcessor.PlayerInput, InputProcessor.SecondWordToEnd, InputProcessor.PlayerInputSplittedString, InputProcessor.FirstItemString, InputProcessor.SecondItemString);
                        
                        break;

                    case ("take"):
                        Player.Take(InputProcessor.SecondWordToEnd, InputProcessor.PlayerInputSplittedString);
                        

                        break;

                    case ("drop"):
                        Player.Drop(InputProcessor.SecondWordToEnd, InputProcessor.PlayerInputSplittedString);

                        break;

                    case ("open"):
                        Player.Open(InputProcessor.SecondWordToEnd, InputProcessor.PlayerInputSplittedString);
                        
                        break;

                    case ("help"):
                        
                        Help();
                        break;

                    default:
                        Console.WriteLine($"I don't know the word \"{InputProcessor.PlayerInputSplittedString[0]}\".");
                        break;


                }
                moveCounter++;
            }

        }

        public void Intro()
        {
            string playerInput;
            string title = "▀█████████▄   ▄██████▄     ▄████████    ▄█   ▄█▄ \r\n  ███    ███ ███    ███   ███    ███   ███ ▄███▀ \r\n  ███    ███ ███    ███   ███    ███   ███▐██▀   \r\n ▄███▄▄▄██▀  ███    ███  ▄███▄▄▄▄██▀  ▄█████▀    \r\n▀▀███▀▀▀██▄  ███    ███ ▀▀███▀▀▀▀▀   ▀▀█████▄    \r\n  ███    ██▄ ███    ███ ▀███████████   ███▐██▄   \r\n  ███    ███ ███    ███   ███    ███   ███ ▀███▄ \r\n▄█████████▀   ▀██████▀    ███    ███   ███   ▀█▀ \r\n                          ███    ███   ▀         ";


            Console.WriteLine($"{title}");
            while (true)
            {
              
                Console.WriteLine("\nWelcome to Bork! Type 'start' to start the game. If you need help type 'help'. Have fun!");


                playerInput = Console.ReadLine();

                switch (playerInput)
                {
                    case ("help"):
                        Help();
                        break;
                    case ("start"):
                        GameRunning = true;
                        return;
                        
                }
            
            }
            
        }
        public void Help()
        {
            Console.WriteLine("Write commands in the console to advance in the game.\n" +
                "If you don't know what to do, type 'inspect' to get a clearer picture about what's going on around you.\n" +
                "You can use items with other items with the syntax: use 'item1' on 'item2'.\n" +
                "Good luck!");

        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class GameObject
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string[] Synonyms { get; set; }

    }
}
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class InputProcessor
    {
        public string PlayerInput { get; set; }
        public string[] PlayerInputSplittedString { get; set; }
        public int IndexOfFirstSpace { get; set; }
        public string FirstWord { get; set; }
        public string SecondWordToEnd { get; set; }
        public string FirstItemString { get; set; }
        public string SecondItemString { get; set; }
        public WordListProcessor WordListProcessor { get; set; }

        private Player _player;

        public InputProcessor(Player player)
        {
            WordListProcessor = new WordListProcessor();
        }

        public void Process(string playerInput)
        {
            PlayerInput = playerInput.ToLower();
            PlayerInputSplittedString = PlayerInput.Split(" ");

            if (PlayerInputSplittedString.Length > 1)
            {
                UpdateProperties();
                CheckAndReplacePrepositions();

                if (SecondWordToEnd.Contains(" on "))
                {
                    GetItemsFromInput();
                }
            }
            else
            {
                IndexOfFirstSpace = -1;
                FirstWord = "";
                SecondWordToEnd = "";
            }

            PlayerInputSplittedString[0] = WordListProcessor.CheckActionSynonyms(PlayerInputSplittedString[0]);
        }

        public void CheckAndReplacePrepositions()
        {
            PlayerInputSplittedString = WordListProcessor.CheckPrepositionSynonyms(PlayerInputSplittedString);
            PlayerInput = string.Join(" ", PlayerInputSplittedString);
            IndexOfFirstSpace = PlayerInput.IndexOf(' ');
            FirstWord = PlayerInput.Substring(0, IndexOfFirstSpace);
            SecondWordToEnd = PlayerInput.Substring(IndexOfFirstSpace + 1);
        }

        public void GetItemsFromInput()
        {
            int indexBeforeOn = SecondWordToEnd.IndexOf("on");
            FirstItemString = SecondWordToEnd.Substring(0, indexBeforeOn - 1);
            SecondItemString = SecondWordToEnd.Substring(indexBeforeOn + "on".Length + 1);
        }

        public void UpdateProperties()
        {
            PlayerInput = PlayerInput.ToLower();
            PlayerInputSplittedString = PlayerInput.Split(" ");
            IndexOfFirstSpace = PlayerInput.IndexOf(' ');
            FirstWord = PlayerInput.Substring(0, IndexOfFirstSpace);
            SecondWordToEnd = PlayerInput.Substring(IndexOfFirstSpace + 1);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class Item : GameObject
    {
        public bool IsContainer { get; set; }
        public List<Item> Container { get; set; } = new List<Item>();
        public string InEnvironmentDescription { get; set; }
        public bool IsVisible { get; set; }
        public bool CanBeTaken { get; set; }
        public string CantBeTakenDescription { get; set; }

        public Item()
        {
      
        }

        public void Use(string[] splittedString, List<Item> inventory)
        {
            switch (Name)
            {

                case ("Pack of bubblegum"):
                 
                    Console.WriteLine("You take a piece of gum and chew it for a while. You put the now chewed gum in your inventory.");                
                    Item chewedGum = new Item();
                    chewedGum.Name = "Chewed gum";
                    chewedGum.Description = "A piece of chewed gum, the taste is long gone.";
                    inventory.Add(chewedGum);

                    break;

                case ("Chewed gum"):

                    Console.WriteLine("You can't use that here.");
                    break;


                case ("Stick"):
                    Console.WriteLine("You hit yourself in the head with the stick.");
                    break;

                case ("Rusty key"):
                    Console.WriteLine("By itself it doesn't do much.");
                    break;

                case ("Golden key"):
                    Console.WriteLine("By itself it doesn't do much.");
                    break;

            }
        }

        //items on items
        public void Combination(Item item2, List<Item> inventory, List<Item> locationItems)
        {
            if (((Name.ToLower() == "chewed gum") && (item2.Name.ToLower() == "stick"))|| ((Name.ToLower() == "stick") && (item2.Name.ToLower() == "chewed gum")))
            {
                inventory.Remove(this);
                inventory.Remove(item2);
                locationItems.Remove(this);
                locationItems.Remove(item2);

                Item newItem = new Item();
                Console.WriteLine("You put the chewed gum at the end of the stick. You have created an abomination.");
                newItem.Name = "Chewing gum stick";
                newItem.Description = "A stick with a piece of chewed gum attached to the end of it.";
                inventory.Add(newItem);

            }
            if (((Name.ToLower() == "chewing gum stick") && (item2.Name.ToLower() == "golden key")) || ((Name.ToLower() == "golden key") && (item2.Name.ToLower() == "chewed gum on a stick")))
            {
                inventory.Remove(this);
                inventory.Remove(item2);
                locationItems.Remove(this);
                locationItems.Remove(item2);

                Item newItem = new Item();
                Console.WriteLine("You reach down the drain with your new abomination and press it against the key.\nThe key attaches itself to the gum and you pull it out.\n" +
                    "You put the key in your inventory.");
                newItem.Name = "Golden key";
                newItem.Description = "A shining golden key that probably fits an equally shining door.";
                inventory.Add(newItem);
            }
        }

        //keys on doors
        public void Combination(RoomExit roomExit)
        {

            if ((Name.ToLower() == "rusty key") && (roomExit.Name.ToLower() == "iron door"))
            {
                roomExit.IsLocked = false;
                Console.WriteLine($"You unlock the {roomExit.Name.ToLower()}.");

                return;
            }
            
            if ((Name.ToLower() == "golden key") && (roomExit.Name.ToLower() == "golden door"))
            {
                roomExit.IsLocked = false;
                Console.WriteLine($"You unlock the {roomExit.Name.ToLower()}.");

                return;

            }
            
            Console.WriteLine("That doesn't work.");           
        }
    }
}
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.ExceptionServices;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class Player
    {
        public string Name { get; set; }
        public List<Item> Inventory { get; set; } = new List<Item>();
        public Room Location { get; set; }

        public Player()
        {
            //loadStartingItems()
        }

        public void DropItem(Item item)
        {
            Location.Items.Add(item);
            Inventory.Remove(item);
        }

        public void ShowInventory()
        {
            if (Inventory.Count == 0)
            {
                Console.WriteLine("You have no items in your inventory.");
            }
            else
            {
                Console.WriteLine($"Inventory:");

                foreach (Item item in Inventory)
                {
                    Console.WriteLine(item.Name);
                }
            }
        }

        public void Look(string playerInput, string secondWordToEnd, string[] splittedString)
        {
            if ((splittedString.Length == 1 && (splittedString[0] == "look")) || (playerInput == "look around"))
            {
                Console.WriteLine(Location.RoomDescription());
                Console.WriteLine(Location.RoomContainsDescription());
                Console.WriteLine(Location.RoomExitsDescription());
            }
            else
            {
                foreach (Item item in Location.Items)
                {
                    if ((item.Name.ToLower() == secondWordToEnd.ToLower()) && (item.IsVisible = true))
                    {
                        Console.WriteLine(item.Description);
                    }
                }

                foreach (Item item in Inventory)
                {
                    if (item.Name.ToLower() == secondWordToEnd.ToLower())
                    {
                        Console.WriteLine($"{item.Description} [in inventory]");
                    }
                }

                foreach (RoomExit roomExit in Location.RoomExits)
                {
                    if (roomExit.Name.ToLower() == secondWordToEnd.ToLower())
                    {
                        Console.WriteLine($"{roomExit.Description}.");
                    }
                }

                foreach (RoomObjectOfInterest objectOfInterest in Location.RoomObjectOfInterest)
                {
                    if (objectOfInterest.Name.ToLower() == secondWordToEnd.ToLower())
                    {
                        Console.WriteLine(objectOfInterest.Description);
                        objectOfInterest.HasBeenInspected = true;

                        foreach (Item item in Location.Items)
                        {
                            item.IsVisible = true;
                        }
                    }
                }
            }
        }

        public bool Move(string[] playerinputSplittedString, string direction, List<Room> roomList)
        {
            bool hasMoved = false;
            string newLocation = "";

            if (playerinputSplittedString.Length == 1)
            {
                Console.WriteLine("Where do you want to 'move'?");
                return false;
            }

            foreach (RoomExit roomexit in Location.RoomExits)
            {
                if (direction.ToLower() == roomexit.Direction.ToLower())
                {
                    if (roomexit.IsClosed == false)
                    {
                        newLocation = roomexit.Connection;
                    }
                    else
                    {
                        Console.WriteLine("There is a door blocking your path.");
                        return false;
                    }
                }

                foreach (Room room in roomList)
                {
                    if (newLocation == room.Name)
                    {
                        Location = room;
                        hasMoved = true;
                    }
                }
            }

            if (hasMoved)
            {
                return true;
            }
            else
            {
                Console.WriteLine("You can't move in that direction.");
                return false;
            }
        }

        public void Use(string playerInput, string secondWordToEnd, string[] splittedString, string firstItem, string secondItem)
        {
            if (splittedString.Length > 1)
            {
                if (secondWordToEnd.Contains(" on "))
                {
                    Item? foundObject1 = Location.Items.FirstOrDefault(i => i.Name.ToLower() == firstItem) ??
                                          Inventory.FirstOrDefault(i => i.Name.ToLower() == firstItem);

                    Item? foundObject2 = Location.Items.FirstOrDefault(i => i.Name.ToLower() == secondItem) ??
                                          Inventory.FirstOrDefault(i => i.Name.ToLower() == secondItem);

                    if (foundObject1 != null && foundObject2 == null)
                    {
                        RoomExit? foundRoomExit = Location.RoomExits.FirstOrDefault(i => i.Name.ToLower() == secondItem);

                        if (foundRoomExit != null)
                        {
                            foundObject1.Combination(foundRoomExit);
                        }
                        else
                        {
                            Console.WriteLine($"I don't know what '{secondItem}' is.");
                        }
                    }
                    else if (foundObject1 != null && foundObject2 != null)
                    {
                        foundObject1.Combination(foundObject2, Inventory, Location.Items);
                    }
                    else
                    {
                        Console.WriteLine($"I don't know what '{firstItem}' is.");
                    }
                }
                else
                {
                    Item? foundObject = Location.Items.FirstOrDefault(i => i.Name.ToLower() == secondWordToEnd) ??
                                          Inventory.FirstOrDefault(i => i.Name.ToLower() == secondWordToEnd);

                    if (foundObject != null)
                    {
                        foundObject.Use(splittedString, Inventory);
                    }
                    else
                    {
                        Console.WriteLine($"I don't know what '{secondWordToEnd}' is.");
                    }
                }
            }
            else
            {
                Console.WriteLine("What do you want to 'use'?");
            }
        }

        public void Open(string secondWordToEnd, string[] splittedString)
        {
            if (secondWordToEnd == "")
            {
                Console.WriteLine("What do you want to 'open'?");
            }

            int amountOfClosedExits = 0;
            foreach (RoomExit roomExit in Location.RoomExits)
            {
                if (roomExit.IsClosed == true)
                {
                    amountOfClosedExits += 1;
                }
            }

            switch (amountOfClosedExits)
            {
                case 0:
                    Console.WriteLine("There is nothing to open here");
                    break;

                case 1:
                    foreach (RoomExit roomExit in Location.RoomExits)
                    {
                        if (secondWordToEnd == roomExit.Name.ToLower() || secondWordToEnd == "door")
                        {
                            if (!roomExit.IsLocked)
                            {
                                if (roomExit.IsClosed)
                                {
                                    roomExit.IsClosed = false;
                                    Console.WriteLine($"You open the {roomExit.Name.ToLower()}.");
                                    break;
                                }
                                else
                                {
                                    Console.WriteLine("The door is already open.");
                                    break;
                                }
                            }
                            else
                            {
                                Console.WriteLine($"The {roomExit.Name.ToLower()} is locked.");
                                break;
                            }
                        }
                    }
                    break;

                default:
                    if (secondWordToEnd == "door")
                    {
                        Console.WriteLine("Which door do you want to open?");
                        break;
                    }
                    else
                    {
                        foreach (RoomExit roomExit in Location.RoomExits)
                        {
                            if (secondWordToEnd == roomExit.Name.ToLower())
                            {
                                if (!roomExit.IsLocked)
                                {
                                    if (roomExit.IsClosed)
                                    {
                                        roomExit.IsClosed = false;
                                        Console.WriteLine($"You open the {roomExit.Name.ToLower()}.");
                                        break;
                                    }
                                    else
                                    {
                                        Console.WriteLine("The door is already open.");
                                        break;
                                    }
                                }
                                else
                                {
                                    Console.WriteLine($"The {roomExit.Name.ToLower()} is locked.");
                                    break;
                                }
                            }
                        }
                    }
                    break;
            }
        }

        public void Take(string takenObject, string[] splittedString)
        {
            if (splittedString.Length > 1)
            {
                foreach (Item item in Location.Items)
                {
                    if ((item.Name.ToLower() == takenObject.ToLower()) && item.IsVisible)
                    {
                        if (item.CanBeTaken)
                        {
                            Location.Items.Remove(item);
                            Inventory.Add(item);
                            Console.WriteLine($"You pick up the {item.Name.ToLower()}.");
                            break;
                        }
                        else
                        {
                            Console.WriteLine(item.CantBeTakenDescription);
                            break;
                        }
                    }
                }
                Console.WriteLine($"What '{takenObject}'?");
            }
            else
            {
                Console.WriteLine("What do you want to 'take'?");
            }
        }

        public void Drop(string droppedObject, string[] splittedString)
        {
            if (splittedString.Length > 1)
            {
                foreach (Item item in Inventory)
                {
                    if (item.Name.ToLower() == droppedObject.ToLower())
                    {
                        Location.Items.Add(item);
                        Inventory.Remove(item);
                        Console.WriteLine($"You drop the {item.Name.ToLower()}.");
                        break;
                    }
                }
            }
            else
            {
                Console.WriteLine("What do you want to 'drop'?");
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public static class Repository
    {


        public static List<Room> LoadRooms()
        {
            List<Room> rooms = new List<Room>();

            using (StreamReader reader = new StreamReader("D:\\repos\\Inlämningsuppgift3\\Inlämningsuppgift3\\Rooms.json"))
            { 
                string stringRooms = reader.ReadToEnd();
                rooms = JsonSerializer.Deserialize<List<Room>>(stringRooms);
            }
            return rooms;
        }

        public static Dictionary<string, string[]> LoadActionWordList()
        {
            Dictionary<string, string[]> wordList = new Dictionary<string, string[]>();

            using (StreamReader reader = new StreamReader("D:\\repos\\Inlämningsuppgift3\\Inlämningsuppgift3\\WordList_ActionSynonyms.json"))
            {
                string stringWordList = reader.ReadToEnd();
                wordList = JsonSerializer.Deserialize<Dictionary<string, string[]>>(stringWordList);

            }

            return wordList;

        }

        public static string[] LoadPrepositionWordList()
        {
            string[] wordList;

            using (StreamReader reader = new StreamReader("D:\\repos\\Inlämningsuppgift3\\Inlämningsuppgift3\\WordList_Prepositions.json"))
            {
                string stringWordList = reader.ReadToEnd();
                wordList = JsonSerializer.Deserialize<string[]>(stringWordList);

            }


            return wordList;
        }

    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class Room : GameObject
    {
        public List<Item> Items { get; set; }
        public List<RoomExit> RoomExits { get; set; }
        public List<RoomObjectOfInterest> RoomObjectOfInterest { get; set; }

        public Room()
        {
            Items = new List<Item>();

            RoomExits = new List<RoomExit>();

            RoomObjectOfInterest = new List<RoomObjectOfInterest>();

        }

        public string RoomDescription() {

            string description = $"\n----------------\n{Name}\n----------------\n{Description}\n";

            return description;
        }
           
        public string RoomContainsDescription()
        {
            string returnString = "";

            foreach (Item item in Items)
            {
                if (item.IsVisible == true)
                {

                    if (item.InEnvironmentDescription == null)
                    {
                        returnString += ($"There is a {item.Name.ToLower()} on the floor.\n");
                    }
                    else
                    {
                        returnString += (item.InEnvironmentDescription);

                    }
                }
            }
            return returnString;

        }

        public string RoomExitsDescription()
        {
            string returnString = "";

            foreach (RoomExit roomExit in RoomExits)
            {
                string openClose = (roomExit.IsClosed) ? "closed" : "open";

                returnString += ($"On the {roomExit.Direction.ToLower()} wall there is a {roomExit.Name.ToLower()}. It is {openClose}.\n");

            }
    
            return returnString;

        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class RoomExit : GameObject
    {
        public string Direction { get; set; }

        public string Connection { get; set; }
        public bool IsLocked { get; set; }

        public bool IsClosed { get; set; }

        public RoomExit()
        {
                
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{   

    public class RoomObjectOfInterest : GameObject
    {
        public bool HasBeenInspected { get; set; }

        public RoomObjectOfInterest()
        {
            HasBeenInspected = false;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.ExceptionServices;
using System.Text;
using System.Threading.Tasks;

namespace Inlämningsuppgift3.Classes
{
    public class WordListProcessor
    {
        public Dictionary<string, string[]> ActionWordList;       
        public string[] PrepositionWordList;

        public WordListProcessor()
        {
            ActionWordList = Repository.LoadActionWordList();
            PrepositionWordList = Repository.LoadPrepositionWordList();
        }

        public string CheckActionSynonyms(string word)
        {

            //common words check
            foreach (string key in ActionWordList.Keys)
            {
                if (word == key)
                {
                    return word;

                }
            }

            //synonyms check
            foreach (KeyValuePair<string,string[]> pair in ActionWordList)
            {
                foreach(string synonym in pair.Value)
                {
                    if (word == synonym)
                    {
                        return pair.Key;

                    }          
                }
            }
            return word;
        }

        public string[] CheckPrepositionSynonyms(string[] playerInputSplittedString)
        {
            string[] returnArray = playerInputSplittedString;

            for(int i = 0; i< playerInputSplittedString.Length; i++)
            {
                for(int i2 = 0; i2 < PrepositionWordList.Length; i2++)
                {
                    if (playerInputSplittedString[i] == PrepositionWordList[i2])
                    {
                        returnArray[i] = "on";

                    }
                }
            }

            return returnArray;
        }
    }
}
using Inlämningsuppgift3.Classes;

namespace Inlämningsuppgift3
{
    public class Program
    {
        static void Main(string[] args)
        {

            GameInterface game = new GameInterface();
            game.Game();



        }
    }
}

JSON files:

Rooms.json:
[
  {
    "Name": "Dungeon",
    "Description": "You are in a small dungeon cell.",
    "RoomExits": [
      {
        "Name": "Iron door",
        "Description": "A thick iron door",
        "Synonyms": [ "door" ],
        "Direction": "North",
        "Connection": "Drainage Room",
        "IsLocked": true,
        "IsClosed": true
      }
    ],

    "Items": [
      {
        "Name": "Pack of bubblegum",
        "Synonyms": [ "bubblegum", "gum", "pack of bubblegum", "pack of gum" ],
        "Description": "A pack of bubblegum. The brand name is \"Hubbabubba\". A classic from your childhood.",
        "IsVisible": true,
        "CanBeTaken": true
      },
      {
        "Name": "Rusty key",
        "Synonyms": [ "key" ],
        "Description": "An old rusty key of simple design.",
        "IsVisible": true,
        "CanBeTaken": true
      }

    ]
  },
  {
    "Name": "Oak Room",
    "Description": "You are in a large circular room, in the middle of the room there is a patch of dirt, and on it stands a *Tree*.",
    "RoomExits": [
      {
        "Name": "Wooden door",
        "Description": "A simple wooden door",
        "Synonyms": [ "door" ],
        "Direction": "East",
        "Connection": "Drainage Room",
        "IsLocked": false,
        "IsClosed": false
      }
    ],
    "Items": [
      {
        "Name": "Stick",
        "Description": "A stick from an oak tree, it's quite straight. It's a good stick.",
        "InEnvironmentDescription": "A stick lies under the oak tree",
        "IsVisible": false,
        "CanBeTaken": true
      }

    ],
    "RoomObjectOfInterest": [
      {
        "Name": "Tree",
        "Description": "A large oak tree, must be more than fifty years old. On the ground next to it you notice a stick that has fallen from the tree"
      }
    ]
  },
  {
    "Name": "Drainage Room",
    "Description": "You are in some sort of drainage room, the floor slopes towards the center of the room\nwhere there is a *Drain* in the floor that collects water from the other rooms.",
    "RoomExits": [
      {
        "Name": "Wooden door",
        "Description": "A simple wooden door",
        "Synonyms": [ "door" ],
        "Direction": "West",
        "Connection": "Oak Room",
        "IsLocked": false,
        "IsClosed": true
      },
      {
        "Name": "Iron door",
        "Description": "A thick iron door",
        "Synonyms": [ "door" ],
        "Direction": "South",
        "Connection": "Dungeon"
      },
      {
        "Name": "Golden door",
        "Description": "A beautiful golden door.",
        "Synonyms": [ "door" ],
        "Direction": "North",
        "Connection": "Final room",
        "IsLocked": true,
        "IsClosed": true

      }
    ],
    "Items": [
      {
        "Name": "Golden key",
        "Synonyms": [ "key" ],
        "Description": "A key of pure gold.",
        "InEnvironmentDescription": "A golden key is stuck down the drain.",
        "CantBeTakenDescription": "Your hand is too big to be able to reach through the iron bars of the drainage hole.",
        "IsVisible": false,
        "CanBeTaken": false
      }
    ],
    "RoomObjectOfInterest": [
      {
        "Name": "Drain",
        "Description": "A drainage hole that collects water from the floor. When you look closer you see something down the drain. A golden key is stuck in the sludge below."
      }
    ]
  },
  {
    "Name": "Final room",
    "Description": "You walk though a long tunnel sloping upwards, you see daylight in the distance. You are free."
  }
]

WordList_ActionSynonyms.json:
{
  "look": [ "check", "examine", "watch", "inspect" ],
  "go": [ "walk", "move", "proceed", "run" ],
  "take": [ "grab", "pick up", "pick", "snatch", "get" ],
  "use": [],
  "open": [],
  "drop": ["throw", "discard"]

}
WordList_Prepositions.json
[ "on", "with", "and" ]



